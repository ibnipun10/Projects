package com.UI.mybuddyapp;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import com.UI.Common.CommonFacebookClass;
import com.UI.Common.Constants;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphUser;
import com.facebook.widget.LoginButton;
import com.facebook.widget.ProfilePictureView;

import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.opengl.Visibility;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.support.v4.app.Fragment;

public class MainFragment extends Fragment {

	private static final String TAG = "MainFragment";
	private UiLifecycleHelper uiHelper;
	private GraphUser user;
	private View mView;
	private LinearLayout mLinearLayoutMain;
	private TextView mCentreText;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		mView = inflater.inflate(R.layout.activity_main, container, false);
		
		

		LoginButton authButton = (LoginButton) mView
				.findViewById(R.id.login_button);
				authButton.setFragment(this);
		authButton.setReadPermissions(SetPermission());		
		
		//authButton.setReadPermissions(permission);

		InitializeComponents();
		authButton
				.setUserInfoChangedCallback(new LoginButton.UserInfoChangedCallback() {
					@Override
					public void onUserInfoFetched(GraphUser user) {

						if (user != null) {
							MainFragment.this.user = user;
							TextView welcomeText = (TextView) mView
									.findViewById(R.id.idMyName);
							welcomeText.setText(user.getName());

							ProfilePictureView  myImg = (ProfilePictureView) mView
									.findViewById(R.id.ProfilePicture);
							myImg.setProfileId(user.getId());
						}
					}
				});

		Button btnHometown = (Button) mView.findViewById(R.id.btnHometown);
		btnHometown.setOnClickListener(TapOnHomeTownButton);

		Button btnLocation = (Button) mView.findViewById(R.id.btnLocation);
		btnLocation.setOnClickListener(TapOnLocationBUtton);

		return mView;
	}

	

	private List<String> SetPermission() {
		// TODO Auto-generated method stub
		List<String> permission = new ArrayList();
	
		permission.add("friends_about_me");
		permission.add("friends_birthday");
		permission.add("friends_hometown");
		permission.add("friends_location");
		permission.add("friends_relationships");
		permission.add("friends_relationships_details");
		
		return permission;
	}



	private void InitializeComponents() {
		// TODO Auto-generated method stub
		mLinearLayoutMain = (LinearLayout) mView.findViewById(R.id.idLayoutMain);
		mCentreText = (TextView) mView.findViewById(R.id.idcentreText);
		mCentreText.setText(Constants.MAINPAGE_MESSAGE);
		
		SetBeforeLoginControlVIsiblity(true);
	}
	
	private void SetBeforeLoginControlVIsiblity(boolean bVisible)
	{
		if(bVisible)
		{
			mLinearLayoutMain.setVisibility(View.GONE);
			mCentreText.setVisibility(View.VISIBLE);
		}
		else
		{
			mLinearLayoutMain.setVisibility(View.VISIBLE);
			mCentreText.setVisibility(View.GONE);
		}
	}

	private View.OnClickListener TapOnHomeTownButton = new View.OnClickListener() {
		@Override
		public void onClick(View view) {
			CommonFacebookClass.bHomeTown = true;
			Intent intent = new Intent(view.getContext(), MapActivity.class);
			startActivity(intent);
		}
	};

	private View.OnClickListener TapOnLocationBUtton = new View.OnClickListener() {
		@Override
		public void onClick(View view) {
			CommonFacebookClass.bHomeTown = false;
			Intent intent = new Intent(view.getContext(), MapActivity.class);
			startActivity(intent);
		}
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		uiHelper = new UiLifecycleHelper(getActivity(), callback);
		uiHelper.onCreate(savedInstanceState);
	}

	private void onSessionStateChange(Session session, SessionState state,
			Exception exception) {
		try
		{
		if (state.isOpened()) {
			
			CommonFacebookClass.session = session;	
			SetBeforeLoginControlVIsiblity(false);
			
		} else if (state.isClosed()) {
			Log.i(TAG, "Logged out...");
			SetBeforeLoginControlVIsiblity(true);
			
		}
		}
		catch(Exception ex)
		{
			
		}
	}

	private Session.StatusCallback callback = new Session.StatusCallback() {
		@Override
		public void call(Session session, SessionState state,
				Exception exception) {
			onSessionStateChange(session, state, exception);
		}
	};

	@Override
	public void onResume() {
		super.onResume();

		// For scenarios where the main activity is launched and user
		// session is not null, the session state change notification
		// may not be triggered. Trigger it if it's open/closed.
		Session session = Session.getActiveSession();
		if (session != null && (session.isOpened() || session.isClosed())) {
			onSessionStateChange(session, session.getState(), null);
		}

		uiHelper.onResume();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		uiHelper.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	public void onPause() {
		super.onPause();
		uiHelper.onPause();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		uiHelper.onDestroy();
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		uiHelper.onSaveInstanceState(outState);
	}

}
